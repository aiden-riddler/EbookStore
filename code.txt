from ShoppingCart import ShoppingCart


class Customer:
    """ class for customer """
    def __init__(self, name, contact_info, is_loyalty_member=False):
        self._name = name
        self._contact_info = contact_info
        self._is_loyalty_member = is_loyalty_member
        self._shopping_cart = ShoppingCart()

    # get customer's shopping cart
    def get_cart(self):
        return self._shopping_cart

    # check customer's loyalty
    def is_loyalty_member(self):
        return self._is_loyalty_member

    # get customer details
    def __str__(self):
        return f"Customer: {self._name}, Contact: {self._contact_info}, Loyalty Member: {self._is_loyalty_member}"



class EBook:
    """ class for Ebook """

    def __init__(self, title, author, publication_date, genre, price):
        self._title = title
        self._author = author
        self._publication_date = publication_date
        self._genre = genre
        self._price = price

    # get price of Ebook
    def get_price(self):
        return self._price

    # get Ebook details
    def __str__(self):
        return f"{self._title} by {self._author} - {self._genre} - ${self._price}"


class EBookCatalog:
    """ class for EBookCatalog """
    def __init__(self):
        self.ebooks = []

    # add ebook to catalog
    def add_ebook(self, ebook):
        self.ebooks.append(ebook)

    # remove ebook from catalog
    def remove_ebook(self, title):
        self.ebooks = [ebook for ebook in self.ebooks if ebook._title != title]

    # print ebooks in catalog
    def list_ebooks(self):
        for ebook in self.ebooks:
            print(ebook)

    # find an ebook on catalog with title
    def find_ebook(self, title):
        for ebook in self.ebooks:
            if ebook._title == title:
                return ebook
        return None


from datetime import datetime


class Invoice:
    """ class for invoice """
    VAT_RATE = 0.08

    def __init__(self, order):
        self.order_details = order
        self.invoice_date = datetime.now()
        self.total_with_vat = self.calculate_total_with_vat()

    # get total cosst with VAT
    def calculate_total_with_vat(self):
        total = self.order_details.get_final_total()
        return total + (total * self.VAT_RATE)

    # get invoice details
    def __str__(self):
        return f"Invoice Date: {self.invoice_date}\n{self.order_details}\nTotal with VAT: ${self.total_with_vat:.2f}"



from datetime import datetime

class Order:
    """ class for order """
    def __init__(self, customer, cart):
        self.order_date = datetime.now()
        self.order_items = cart.items.copy()
        self.total_price = cart.get_cart_total()
        self.customer = customer
        self.discount = self.calculate_discount()

    # calculate customer discount based on loyalty
    def calculate_discount(self):
        discount = 0
        if self.customer.is_loyalty_member():
            discount += 0.10 * self.total_price  # 10% for loyalty members
        if len(self.order_items) >= 5:
            discount += 0.20 * self.total_price  # 20% for bulk orders
        return discount

    # get final total price
    def get_final_total(self):
        return self.total_price - self.discount

    # get order details
    def __str__(self):
        items = "\n".join([f"{ebook} x {qty}" for ebook, qty in self.order_items.items()])
        return f"Order Date: {self.order_date}\nItems:\n{items}\nDiscount: ${self.discount}\nTotal: ${self.get_final_total()}"


class ShoppingCart:
    """ class for shopping cart"""
    def __init__(self):
        self.items = {}

    # add ebook to cart
    def add_to_cart(self, ebook, quantity=1):
        if ebook in self.items:
            self.items[ebook] += quantity
        else:
            self.items[ebook] = quantity

    # remove ebook from cart
    def remove_from_cart(self, ebook):
        if ebook in self.items:
            del self.items[ebook]

    # get total price of items in cart
    def get_cart_total(self):
        return sum(ebook.get_price() * qty for ebook, qty in self.items.items())

    # print shopping cart
    def list_cart_items(self):
        for ebook, qty in self.items.items():
            print(f"{ebook} x {qty}")

    # remove all items from cart
    def clear_cart(self):
        self.items = {}
